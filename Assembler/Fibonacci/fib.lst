; Initialize
8080    ; MOV R0, 128         ; Move 0x80 to R0
9000    ; MOV R1, 0           ; Move 0 to R1
1040    ; LDR R0, R1, R0      ; Get the program counter
a000    ; MOV R2, 0           ; Value in Memory to write to
b001    ; MOV R3, 1           ; Value to add/sub every iteration

; Edge Cases (n = 0 or 1)
2209    ; SUB R1, R0, R1      ; Check to see if value is F(0)
7003    ; BNE 3               ; If Not Equal, skip next three instructions
7003    ; MOV R1, 0           ; Move 0 to R1
1889    ; STR R1, R2, R1      ; Store Value
0600    ; HALT                ; End program

9001    ; MOV R1, 1           ; Move 1 to R1
2209    ; SUB R1, R0, R1      ; Check to see if value is F(0)
7005    ; BNE 5               ; If Not Equal skip next 5 instructions
9000    ; MOV R1, 0           ; Move value F(0) to R1
1889    ; STR R1, R2, R1      ; Store value
9001    ; MOV R1, 1           ; Move F(1) to R1
184a    ; STR R1, R1, R2      ; Store F(1) at address (1)
0600    ; HALT                ; End Program

; Reinitialize values
8080    ; MOV R0, 128         ; Move 0x80 to R0
9000    ; MOV R1, 0           ; Move F(0) to R1
1040    ; LDR R0, R1, R0      ; Get the program counter
a000    ; MOV R2, 0           ; Value in Memory to write to
b001    ; MOV R3, 1           ; Value to add/sub every iteration
188a    ; STR R1, R2, R2      ; Initalize F(0) and F(1) in memory
204b    ; ADD R1, R1, R3      ; Compute F(1)
188b    ; STR R1, R2, R3      ; Store F(0) at address 1
a001    ; MOV R2, 1           ; Most Recent Fib value
b001    ; MOV R3, 1           ; Value to add/sub every iteration
c000    ; MOV R4, 0           ; Zero register
2203    ; SUB R0, R0, R3      ; Decrement R0 by 1 (we've computed F(1))

; Iteration
10ac    ; LDR R5, R2, R4      ; Load F(n) at Address R2
22b3    ; SUB R6, R2, R3      ; Compute n-1
11b4    ; LDR R6, R6, R4      ; Get F(n-1)
214e    ; ADD R1, R5, R6      ; Compute Fib Value
2093    ; ADD R2, R2, R3      ; Update Memory Address
188c    ; STR R1, R2, R4      ; Store Fib Value
2203    ; SUB R0, R0, R3      ; Decrease R0
6001    ; BEQ 1               ; If R0 is 0, skip next instruction
4ff7    ; B -9                ; Otherwise, iterate
0600    ; HALT




